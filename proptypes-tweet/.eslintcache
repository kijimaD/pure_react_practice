[{"/home/kijima/Project/pure-react/static-tweet/src/index.js":"1","/home/kijima/Project/pure-react/props-tweet/src/index.js":"2","/home/kijima/Project/pure-react/proptypes-tweet/src/index.js":"3"},{"size":1918,"mtime":1607740327219,"results":"4","hashOfConfig":"5"},{"size":4267,"mtime":1607782095607,"results":"6","hashOfConfig":"7"},{"size":6174,"mtime":1607837641380,"results":"8","hashOfConfig":"9"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dp0oac",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"107jrup",{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ytijpl","/home/kijima/Project/pure-react/static-tweet/src/index.js",[],"/home/kijima/Project/pure-react/props-tweet/src/index.js",["17","18"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment';\nimport './index.css';\nimport PropTypes from 'prop-types';\n\nfunction Tweet({ tweet }) {\n    return (\n\t  <div className=\"tweet\">\n\t    <Avatar hash={tweet.gravatar}/>\n\t    <div className=\"content\">\n\t    <Author author={tweet.author}/>\n\t    <Time time={tweet.timestamp}/>\n\t    <Message text={tweet.message}/>\n\t    <div className=\"buttons\">\n\t    <ReplyButton/>\n\t    <RetweetButton count={tweet.retweets}/>\n\t    <LikeButton count={tweet.likes}/>\n\t    <MoreOptionsButton/>\n\t    </div>\n\t    </div>\n\t    </div>\n    );\n}\n\nfunction TypeCheck() {\n    return (\n\t<div>\n    <Comment author='somebody' message='a likable message' likes={1}/>\n    <Comment author='mr_unpopular' message='unlikable message'/>\n    <Comment author='mr_unpopular' message='another message' likes={0}/>\n    <Comment author='error_missing_message'/>\n\t    <Comment message='mystery author'/>\n\t    </div>\n    );\n}\n\nfunction Avatar({ hash }) {\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    return (\n\t    <img\n\tsrc={url}\n\tclassName=\"avatar\"\n\talt=\"avatar\" />\n    );\n}\n\nfunction Message({ text }) {\n    return (\n\t    <div className=\"message\">\n\t    {text}\n\t    </div>\n    );\n}\n\nfunction Author({ author }) {\n    const { name, handle } = author;\n    return (\n\t    <span className=\"author\">\n\t    <span className=\"name\">{name}</span>\n\t    <span className=\"handle\">@{handle}</span>\n\t    </span>\n    );\n}\n\nconst Time = ({ time }) => {\n    const timeString = moment(time).fromNow();\n    return (\n\t    <span className=\"time\">\n\t    {timeString}\n\t</span>\n    );\n};\n\nconst ReplyButton = () => (\n    <i className=\"fa fa-reply reply-button\"/>\n);\n\nconst RetweetButton = ({ count }) => (\n    <span className=\"retweet-button\">\n\t<i className=\"fa fa-retweet\"/>\n\t<Count count={count} />\n    </span>\n);\n\nconst LikeButton = ({ count }) => (\n    <span className=\"like-button\">\n\t<i className=\"fa fa-heart\"/>\n\t <span className=\"like-count\">\n\t{count ? count : null}\n\t </span>\n    </span>\n);\n\nconst MoreOptionsButton = () => (\n    <i className=\"fa fa-ellipsis-h more-options-button\"/>\n);\n\nfunction getRetweetCount(count) {\n    if(count > 0) {\n\treturn (\n\t\t<span className=\"retweet-count\">\n\t\t{count}\n\t    </span>\n\t);\n    } else {\n\treturn null;\n    }\n}\n\nfunction Count({ count }) {\n    if(count > 0) {\n\treturn (\n\t\t<span className=\"retweet-count\">\n\t\t{count}\n\t    </span>\n\t);\n    } else {\n\treturn null;\n    }\n}\n\nfunction Comment({ author, message, likes}) {\n    return (\n\t    <div>\n\t    <div className='author'>{author}</div>\n\t    <div className='message'>{message}</div>\n\t    <div className='likes'>\n\t    {likes > 0 ? likes : 'No'} likes\n\t</div>\n\t    </div>\n    );\n}\n\nComment.propTypes = {\n    message: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    likes: PropTypes.number\n}\n\nfunction customValidator(props, propName, componentName) {\n    if (props[propName].length !== 3) {\n\treturn new Error(\n\t    'Invalid prop `' + propName + '` supplied to' +\n\t\t' `' + componentName + '`. Length is not 3.'\n\t);\n    }\n}\n\nconst CustomTest = ({ myCustomProp }) => (\n    <span>{myCustomProp}</span>\n);\n\nCustomTest.propTypes = {\n    myCustomProp: customValidator\n}\n\n// function Dave() {\n//     const firstName = \"Dave\";\n//     const lastName = \"Ceddia\";\n\n//     return React.createElement(, {\n// \tage: 33,\n// \tname: firstName + ' ' + lastName,\n// \tclassName: 'person'\n//     }, null);\n// }\n\n// function handleAction(event) {\n//     console.log('Child did:', event);\n// }\n\n// function Parent() {\n//     return (\n// \t    <Child onAction={handleAction}/>\n//     );\n// }\n\n// function Child({ onAction }) {\n//     return (\n// \t    <button onClick={onAction}/>\n//     );\n// }\n\n// function greet() {\n//     return 'Hi Dave';\n// }\n// function greet(name) {\n//     return 'Hi Dave' + name;\n// }\n\nconst testTweet = {\n    message: \"Something about cats.\",\n    gravatar: \"4b4c88daa2d4cec56333c7959b08c18d\",\n    author: {\n\thandle: \"catperson\",\n\tname: \"IAMA Cat Person\"\n    },\n    likes: 2,\n    retweets: 1,\n    timestamp: \"2016-07-30 21:24:37\"\n};\n\nReactDOM.render(<Tweet tweet={testTweet}/>,\n\t\tdocument.querySelector('#root'));\n\n// ReactDOM.render(\n// \t<CustomTest myCustomProp=\"aaaaaaaaaaaaa\"/>,\n// \tdocument.querySelector('#root')\n// );\n","/home/kijima/Project/pure-react/proptypes-tweet/src/index.js",["19","20","21","22","23","24"],{"ruleId":"25","severity":1,"message":"26","line":26,"column":10,"nodeType":"27","messageId":"28","endLine":26,"endColumn":19},{"ruleId":"25","severity":1,"message":"29","line":99,"column":10,"nodeType":"27","messageId":"28","endLine":99,"endColumn":25},{"ruleId":"25","severity":1,"message":"30","line":7,"column":10,"nodeType":"27","messageId":"28","endLine":7,"endColumn":15},{"ruleId":"25","severity":1,"message":"26","line":26,"column":10,"nodeType":"27","messageId":"28","endLine":26,"endColumn":19},{"ruleId":"25","severity":1,"message":"29","line":123,"column":10,"nodeType":"27","messageId":"28","endLine":123,"endColumn":25},{"ruleId":"25","severity":1,"message":"31","line":135,"column":10,"nodeType":"27","messageId":"28","endLine":135,"endColumn":15},{"ruleId":"25","severity":1,"message":"32","line":267,"column":10,"nodeType":"27","messageId":"28","endLine":267,"endColumn":13},{"ruleId":"25","severity":1,"message":"33","line":288,"column":7,"nodeType":"27","messageId":"28","endLine":288,"endColumn":16},"no-unused-vars","'TypeCheck' is defined but never used.","Identifier","unusedVar","'getRetweetCount' is defined but never used.","'Tweet' is defined but never used.","'Count' is defined but never used.","'Nav' is defined but never used.","'testTweet' is assigned a value but never used."]